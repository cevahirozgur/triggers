-- Firstly, create a database named LOGDB. Then, take the script of the [ITEMS] table for the [ETRADE_RDMS] database, create the ITEMS table in the LOGDB database and put new variables related to the Log process.

CREATE TABLE [dbo].[ITEMS](
	[ID] [int] NOT NULL,
	[ITEMCODE] [varchar](50) NULL,
	[ITEMNAME] [varchar](100) NULL,
	[UNITPRICE] [float] NULL,
	[CATEGORY1] [varchar](50) NULL,
	[CATEGORY2] [varchar](50) NULL,
	[CATEGORY3] [varchar](50) NULL,
	[CATEGORY4] [varchar](50) NULL,
	[BRAND] [varchar](50) NULL,
	LOG_ACTIONTYPE VARCHAR(100) NULL, 
	LOG_DATE DATETIME NULL,			      
	LOG_USERNAME VARCHAR(100),		   
	LOG_HOSTNAME VARCHAR(100),        
	LOG_PROGRAMNAME VARCHAR(100)       
	)
	
-- Create an UPDATE TRIGGER to keep logs.

CREATE TRIGGER TRG_ITEMS_LOG
ON ITEMS
AFTER UPDATE
AS
BEGIN
	DECLARE @LOG_ACTIONTYPE AS VARCHAR(10)='UPDATE'  --default olarak değer girdim
	DECLARE @LOG_DATE AS DATETIME
	DECLARE @LOG_USERNAME AS VARCHAR(100)	   
	DECLARE @LOG_HOSTNAME AS VARCHAR(100) 
	DECLARE @LOG_PROGRAMNAME AS VARCHAR(100)

	SET @LOG_DATE=GETDATE()
	SET @LOG_USERNAME=SUSER_SNAME()
	SET @LOG_HOSTNAME=HOST_NAME()
	SET @LOG_PROGRAMNAME=PROGRAM_NAME()

	INSERT INTO LOGDB.dbo.ITEMS
	(ID, ITEMCODE, ITEMNAME, UNITPRICE, CATEGORY1, CATEGORY2, CATEGORY3, CATEGORY4, BRAND, 
	LOG_ACTIONTYPE, LOG_DATE, LOG_USERNAME, LOG_HOSTNAME, LOG_PROGRAMNAME)
	SELECT
	ID, ITEMCODE, ITEMNAME, UNITPRICE, CATEGORY1, CATEGORY2, CATEGORY3, CATEGORY4, BRAND, 
	@LOG_ACTIONTYPE, @LOG_DATE, @LOG_USERNAME, @LOG_HOSTNAME, @LOG_PROGRAMNAME
	FROM deleted  --Eski değerler lazım

END

-- Let's see what happens when we do UPDATE with the help of this trigger!

UPDATE ITEMS SET UNITPRICE=50 WHERE ID=3

SELECT * FROM ITEMS WHERE ID=3

SELECT * FROM LOGDB.dbo.ITEMS

-- With the UPDATE we made, we can observe this pre-process value and LOG records.